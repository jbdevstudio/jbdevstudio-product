<project default="build" name="devstudio results builder">
  <!-- if ${WORKSPACE}/site folder exists, target that folder; else generate here. -->
  <condition property="output.dir" value="${WORKSPACE}/results" else="${basedir}">
    <available file="${WORKSPACE}/results" />
  </condition>

  <property name="tmpdir" value="${java.io.tmpdir}/devstudio-results-build" />

  <property name="project.build.directory" value="${output.dir}/target"/>
  <property name="requirements.dir" value="${output.dir}/requirements"/>

  <target name="init">
    <echo level="verbose">
This script requires Ant 1.8+ and JDK 1.6+.
-------------------------------------------
$ant.version = ${ant.version}
$ant.home = ${ant.home}
$ant.java.version = ${ant.java.version}
$java.home = ${java.home}</echo>
    <taskdef resource="net/sf/antcontrib/antlib.xml" />

    <mkdir dir="${tmpdir}" />
    <delete dir="target/" quiet="true" />
    <mkdir dir="target/" />

    <mkdir dir="../installer/target"/>
    <mkdir dir="../site/target/repository"/>
  </target>

  <target name="build" depends="init">
    <!-- should be set already by Jenkins, but for local builds set a default -->
    <property name="JOB_NAME" value="devstudio.product_master"/>
    <property name="update.site.description" value="Local Build"/>

    <!-- get timestamp from upstream installer build (units.unit.id = Alpha2-v20130326-1416-B6969.devstudio) instead of maven since tycho and pure maven don't use the same value -->
    <if>
      <available file="../installer/target/p2content.xml"/>
      <then>
        <xmlproperty file="../installer/target/p2content.xml" collapseAttributes="true"/>
        <propertyregex property="update.site.qualifier" defaultvalue="${units.unit.id}" input="${units.unit.id}" regexp=".devstudio" replace="" override="true" />
      </then>
      <else>
        <if>
          <isset property="BUILD_NUMBER"/>
          <then>
            <var name="update.site.qualifier" value="${update.site.qualifier}-B${BUILD_NUMBER}"/>
          </then>
        </if>
      </else>
    </if>

    <propertyregex property="update.site.version" defaultvalue="${project.version}" input="${project.version}" regexp="-SNAPSHOT" replace="" override="true" />
    <propertyregex property="qualifier" defaultvalue="${update.site.qualifier}" input="${update.site.qualifier}" regexp="GA.*" replace="GA" override="true" />
    <var name="devstudio.version" unset="true"/>
    <var name="devstudio.version" value="${update.site.version}.${qualifier}"/>
    <echo level="info">update.site.version = ${update.site.version}, JBT.version = ${JBT.version}, devstudio.version = ${devstudio.version}, update.site.qualifier = ${update.site.qualifier}</echo>

    <path id="devstudio-installer-standalone-file-id"><fileset dir="../installer/target"><include name="devstudio-*-installer-standalone.jar"/></fileset></path><property name="devstudio-installer-standalone-file" refid="devstudio-installer-standalone-file-id"/>

    <path id="devstudio-installer-eap-file-id"><fileset dir="../installer/target"><include name="devstudio-*-installer-eap.jar"/></fileset></path><property name="devstudio-installer-eap-file" refid="devstudio-installer-eap-file-id"/>

    <path id="devstudio-updatesite-core-file-id"><fileset dir="../site/target"><include name="com.jboss.devstudio.core.site-*.zip"/></fileset></path><property name="devstudio-updatesite-core-file" refid="devstudio-updatesite-core-file-id"/>

    <if>
      <isset property="JBOSS_CENTRAL_ZIP"/>
      <then>
        <basename property="JBOSS_CENTRAL_ZIP_FILENAME" file="${JBOSS_CENTRAL_ZIP}"/>
        <mkdir dir="${requirements.dir}"/>
        <get-and-checksum src="${JBOSS_CENTRAL_ZIP}" dest="${requirements.dir}/${JBOSS_CENTRAL_ZIP_FILENAME}"/>
        <property name="devstudio-updatesite-central-file" value="${requirements.dir}/${JBOSS_CENTRAL_ZIP_FILENAME}"/>
      </then>
    </if>

    <property name="destdir" value="${project.build.directory}/all"/>
    <mkdir dir="${destdir}"/>

    <!-- move all the bits from other places into results/target/ folder -->
    <for list="devstudio-installer-standalone-file,devstudio-installer-eap-file,devstudio-updatesite-core-file,devstudio-updatesite-central-file" param="this">
      <sequential>
        <if>
          <available file="${@{this}}" type="file"/>
          <then>
            <var name="thisfile" unset="true"/>
            <!-- get updatesite-core from from devstudio-updatesite-core-file -->
            <propertyregex property="filedesc" defaultvalue="@{this}" input="@{this}" regexp="devstudio-(.+)-file" replace="\1" override="true" />

            <!-- get "jar" or "zip" from devstudio-10.0.0.Beta2-v20150715-1358-B450000-installer-eap.jar or com.jboss.devstudio.core.site-*.zip -->
            <propertyregex property="filetype" defaultvalue="${@{this}}" input="${@{this}}" regexp=".+\.(.+)" replace="\1" override="true" />
            <var name="destfile" value="devstudio-${update.site.version}.${update.site.qualifier}-${filedesc}.${filetype}"/>
            <echo>Copy ${@{this}} to ${destdir}/${destfile}</echo>
            <copy verbose="false" file="${@{this}}" tofile="${destdir}/${destfile}" preservelastmodified="true"/>
            <var name="@{this}" unset="true"/>
            <property name="@{this}" value="${destdir}/${destfile}"/>
            <echo>Symlink devstudio-${update.site.version}.latest-${filedesc}.${filetype} to ./${destfile} (in destdir = ${destdir})</echo>
            <symlink link="${destdir}/devstudio-${update.site.version}.latest-${filedesc}.${filetype}" resource="./${destfile}"/>
          </then>
        </if>
      </sequential>
    </for>

    <echo>Copy ../site/target/repository to ${destdir}/repo</echo>
    <copy todir="${destdir}/repo">
        <fileset dir="../site/target/repository"/>
    </copy>

    <antcall target="create.customer-portal.metadata">
      <param name="update.site.qualifier" value="${update.site.qualifier}"/>
    </antcall>

    <antcall target="create.content.json"/>

    <antcall target="cleanup" />
  </target>

  <target name="cleanup">
    <delete includeemptydirs="true" quiet="true">
      <fileset dir="${tmpdir}" />
    </delete>
  </target>

<!-- macros -->

  <!-- JBIDE-19800 - use .sha256 instead of .MD5 -->
  <macrodef name="get-and-checksum">
    <attribute name="src"/>
    <attribute name="dest"/>
    <sequential>
      <get src="@{src}.sha256" dest="@{dest}.sha256" usetimestamp="true"/>
      <get src="@{src}" dest="@{dest}" usetimestamp="true"/>
      <checksum file="@{dest}" algorithm="SHA-256" fileext=".sha256" verifyproperty="checksum.matches"/>
      <condition property="checksum.matches.fail"><equals arg1="${checksum.matches}" arg2="false"/></condition>
      <fail if="checksum.matches.fail">Checksum error reading @{src} => @{dest}</fail>
      <var name="checksum.matches" unset="true"/>
      <var name="checksum.matches.fail" unset="true"/>
    </sequential>
  </macrodef>

  <macrodef name="get.size">
    <attribute name="file" />
    <attribute name="property" />
    <sequential>
      <var name="size" unset="true" />
      <var name="size-in-mb" unset="true" />
      <if>
        <available file="@{file}" />
        <then>
          <length file="@{file}" property="size" />

          <math result="size-in-mb">
            <op op="/">
              <op op="floor">
                <op op="*">
                  <op op="/">
                    <num value="${size}" />
                    <num value="1048576" />
                  </op>
                  <num value="100" />
                </op>
              </op>
              <num value="100" />
            </op>
          </math>

          <property name="@{property}" value="${size-in-mb}" />
        </then>
        <else>
          <property name="@{property}" value="-1" />
        </else>
      </if>
    </sequential>
  </macrodef>

  <target name="create.customer-portal.metadata">

    <propertyregex property="qualifier" defaultvalue="${update.site.qualifier}" input="${update.site.qualifier}" regexp="GA.*" replace="GA" override="true" />
    <!-- <propertyregex property="qualifier" defaultvalue="${qualifier}" input="${qualifier}" regexp=".*null" replace="LOCAL" override="true" /> -->

    <property name="eap.version" value="${eap.version}"/>
    <property name="eclipse.version" value="${eclipse.version}"/>
    <property name="devstudio.update.site" value="${devstudio.update.site}"/>

    <for list="devstudio-installer-standalone-file,devstudio-installer-eap-file,devstudio-updatesite-core-file,devstudio-updatesite-central-file" param="this">
      <sequential>
        <if>
          <available file="${@{this}}" type="file"/>
          <then>
            <checksum file="${@{this}}" algorithm="SHA-256" fileext=".sha256"/>
            <loadfile srcfile="${@{this}}.sha256" property="@{this}.sha256" failonerror="true" />
            <get.size file="${@{this}}" property="@{this}-size" />
            <basename file="${@{this}}" property="@{this}-name" />
            <propertyregex property="templatename" defaultvalue="@{this}" input="@{this}" regexp="devstudio-(.+)-file" replace="\1" override="true" />
            <propertyregex property="templatename-alternate" defaultvalue="${templatename}" input="${templatename}" regexp="(.+)-(.+)" replace="\1" override="true" />

            <echo level="verbose">@{this} = ${@{this}}
  :: ${@{this}-name}, ${@{this}-size}M, ${@{this}.sha256}
  :: ${templatename}, ${templatename-alternate}</echo>

            <!-- generate manual-instructions.txt file for each artifact -->
            <var name="templatefile" unset="true"/>
            <condition property="templatefile" value="customer-portal/${templatename}.manual-instructions.txt" else="customer-portal/${templatename-alternate}.manual-instructions.txt">
              <available file="customer-portal/${templatename}.manual-instructions.txt" />
            </condition>
            <antcall target="generate.file.from.template">
              <param name="input" value="${templatefile}"/>
              <param name="output" value="${@{this}-name}.manual-instructions.txt"/>
            </antcall>

            <!-- generate detailed-description.html file for each artifact -->
            <var name="templatefile" unset="true"/>
            <condition property="templatefile" value="customer-portal/${templatename}.detailed-description.html" else="customer-portal/${templatename-alternate}.detailed-description.html">
              <available file="customer-portal/${templatename}.detailed-description.html" />
            </condition>
            <antcall target="generate.file.from.template">
              <param name="input" value="${templatefile}"/>
              <param name="output" value="${@{this}-name}.detailed-description.html"/>
            </antcall>
          </then>
        </if>
      </sequential>
    </for>

    <!-- produce src zip instruction files -->
    <antcall target="generate.file.from.template">
      <param name="input" value="customer-portal/src.manual-instructions.txt"/>
      <param name="output" value="devstudio-src.manual-instructions.txt"/>
    </antcall>
    <antcall target="generate.file.from.template">
      <param name="input" value="customer-portal/src.detailed-description.html"/>
      <param name="output" value="devstudio-src.detailed-description.html"/>
    </antcall>
  </target>

  <target name="create.content.json">
    <property name="destdir" value="${project.build.directory}/all"/>
    <mkdir dir="${destdir}"/>
    <if>
      <available file="../installer/target/p2content.xml"/>
      <then>
        <xmlproperty file="../installer/target/p2content.xml" collapseAttributes="true"/>
        <propertyregex property="update.site.qualifier" defaultvalue="${units.unit.id}" input="${units.unit.id}" regexp=".devstudio" replace="" override="true" />
      </then>
      <else>
        <if>
          <isset property="BUILD_NUMBER"/>
          <then>
            <var name="update.site.qualifier" value="${update.site.qualifier}-B${BUILD_NUMBER}"/>
          </then>
        </if>
      </else>
    </if>
    <if>
      <not><equals arg1="&amp;shy;" arg2="${update.site.description}"/></not>
      <then>
        <var name="update.site.description.json" value=" ${update.site.description}"/>
      </then>
      <else>
        <var name="update.site.description.json" value=""/>
      </else>
    </if>

    <!-- https://devstudio.redhat.com/10.0/snapshots/builds/devstudio.product_master/latest/all/devstudio-10.0.0.Alpha1-v20160517-2010-B5374-installer-standalone.jar -->
    <echo file="${destdir}/content.json">{
"name": "Red Hat JBoss Developer Studio Installer",
"description": "Red Hat JBoss Developer Studio ${update.site.version}.${BUILD_ALIAS} Installer${update.site.description.json}",
"fullVersion": "${devstudio.version}",
"installer": "https://devstudio.redhat.com/${snapshotBuildPath}/devstudio-${devstudio.version}-installer-standalone.jar"
}
</echo>
  </target>

  <!-- JBDS-3047 produce text/html fragments for each artifact -->
  <target name="generate.file.from.template">
    <!-- use locally built files with relative paths -->
    <echo level="verbose">Generate ${destdir}/${output} from ${input}</echo>
    <copy todir="${destdir}" overwrite="true">
      <fileset file="${input}" />
      <mapper type="merge" to="${output}" />
      <filterchain>
        <expandproperties />
      </filterchain>
    </copy>
  </target>

</project>
