<project default="build" name="jbds aggregate sources build.xml">
  <!-- if ${WORKSPACE}/site folder exists, target that folder; else generate here. -->
  <condition property="output.dir" value="${WORKSPACE}/results" else="${basedir}">
    <available file="${WORKSPACE}/results" />
  </condition>

  <property name="tmpdir" value="${java.io.tmpdir}/jbds-results-build" />

  <property name="project.build.directory" value="${output.dir}/target"/>
  <property name="requirements.dir" value="${output.dir}/requirements"/>

  <target name="init">
    <echo level="verbose">
This script requires Ant 1.8+ and JDK 1.6+.
-------------------------------------------
$ant.version = ${ant.version}
$ant.home = ${ant.home}
$ant.java.version = ${ant.java.version}
$java.home = ${java.home}</echo>
    <taskdef resource="net/sf/antcontrib/antlib.xml" />

    <mkdir dir="${tmpdir}" />
    <delete dir="target/" quiet="true" />
    <mkdir dir="target/" />
  </target>

  <target name="build" depends="init">
    <!-- should be set already by Jenkins, but for local builds set a default -->
    <property name="JOB_NAME" value="devstudio.product_master"/>
    <property name="update.site.description" value="Local Build"/>

    <!-- get timestamp from upstream installer build (units.unit.id = Alpha2-v20130326-1416-B6969.jbds) instead of maven since tycho and pure maven don't use the same value -->
    <if>
      <available file="../installer/target/p2content.xml"/>
      <then>
        <xmlproperty file="../installer/target/p2content.xml" collapseAttributes="true"/>
        <propertyregex property="update.site.qualifier" defaultvalue="${units.unit.id}" input="${units.unit.id}" regexp=".jbds" replace="" override="true" />
      </then>
      <else>
        <if>
          <isset property="BUILD_NUMBER"/>
          <then>
            <var name="update.site.qualifier" value="${update.site.qualifier}-B${BUILD_NUMBER}"/>
          </then>
        </if>
      </else>
    </if>

    <propertyregex property="update.site.version" defaultvalue="${project.version}" input="${project.version}" regexp="-SNAPSHOT" replace="" override="true" />

    <path id="jboss-devstudio-installer-standalone-file-id"><fileset dir="../installer/target"><include name="jboss-devstudio-*-installer-standalone.jar"/></fileset></path><property name="jboss-devstudio-installer-standalone-file" refid="jboss-devstudio-installer-standalone-file-id"/>
    <path id="jboss-devstudio-installer-eap-file-id"><fileset dir="../installer/target"><include name="jboss-devstudio-*-installer-eap.jar"/></fileset></path><property name="jboss-devstudio-installer-eap-file" refid="jboss-devstudio-installer-eap-file-id"/>

    <echo level="info">update.site.version = ${update.site.version}, JBT.version = ${JBT.version}, update.site.qualifier = ${update.site.qualifier}</echo>

    <!-- no longer needed; just copy the file to the right folder -->
    <path id="jboss-devstudio-src-file-id"><fileset dir="../site/target/fullSite/all"><include name="jboss-devstudio-*-src.zip"/></fileset></path><property name="jboss-devstudio-src-file" refid="jboss-devstudio-src-file-id"/>
    <if>
      <available file="${jboss-devstudio-src-file}" type="file"/>
      <then>
        <copy verbose="false" file="${jboss-devstudio-src-file}" tofile="${project.build.directory}/jboss-devstudio-${update.site.version}.${update.site.qualifier}-src.zip" preservelastmodified="true"/>
        <var name="jboss-devstudio-src-file" unset="true"/>
        <path id="jboss-devstudio-src-file-id2"><fileset dir="target"><include name="jboss-devstudio-*-src.zip"/></fileset></path>
        <property name="jboss-devstudio-src-file" refid="jboss-devstudio-src-file-id2"/>
      </then>
    </if>

    <!-- special case: copy the site_assembly.zip to target folder; the rest need not be moved -->
    <!-- JBDS-2556 no longer need this zip because installer is an update site archive too! -->
    <!-- JBDS-2649 still needed because the installer may contain different content than the update site some day -->
    <property name="jboss-devstudio-updatesite-core-file" value="${basedir}/target/jboss-devstudio-${update.site.version}.${update.site.qualifier}-updatesite-core.zip"/>
    <if>
      <available file="../site/target/site_assembly.zip" type="file"/>
      <then>
        <copy file="../site/target/site_assembly.zip" tofile="${jboss-devstudio-updatesite-core-file}" preservelastmodified="true" overwrite="true"/>
      </then>
    </if>

    <!-- TOOLSDOC-426 link to Central zip. Job parameter JBOSS_CENTRAL_ZIP is passed from jbosstools-centraltarget_41 job to devstudio.product_71 job 
         so that this will have a value, eg.,
         http://download.jboss.org/jbosstools/targetplatforms/jbtcentraltarget/4.31.0.CR1-SNAPSHOT/jbtcentraltarget-4.31.0.CR1-SNAPSHOT.zip 
    -->
    <property name="jboss-devstudio-updatesite-central-file" value="${basedir}/target/jboss-devstudio-${update.site.version}.${update.site.qualifier}-updatesite-central.zip"/>
    <if>
      <isset property="JBOSS_CENTRAL_ZIP"/>
      <then>
        <basename property="JBOSS_CENTRAL_ZIP_FILENAME" file="${JBOSS_CENTRAL_ZIP}"/>
        <mkdir dir="${requirements.dir}"/>
        <get-and-checksum src="${JBOSS_CENTRAL_ZIP}" dest="${requirements.dir}/${JBOSS_CENTRAL_ZIP_FILENAME}"/>
        <copy file="${requirements.dir}/${JBOSS_CENTRAL_ZIP_FILENAME}" tofile="${jboss-devstudio-updatesite-central-file}"/>
      </then>
    </if>

    <antcall target="create.jbds.results.html">
      <param name="update.site.qualifier" value="${update.site.qualifier}"/>
    </antcall>

    <antcall target="cleanup" />
  </target>

  <target name="cleanup">
    <delete includeemptydirs="true" quiet="true">
      <fileset dir="${tmpdir}" />
    </delete>
  </target>

<!-- macros -->

  <!-- JBIDE-19800, JBIDE-20143 - use .sha256 instead of .MD5 -->
  <macrodef name="get-and-checksum">
    <attribute name="src"/>
    <attribute name="dest"/>
    <sequential>
      <get src="@{src}.sha256" dest="@{dest}.sha256" usetimestamp="true"/>
      <get src="@{src}" dest="@{dest}" usetimestamp="true"/>
      <checksum file="@{dest}" algorithm="SHA-256" fileext=".sha256" verifyproperty="checksum.matches"/>
      <condition property="checksum.matches.fail"><equals arg1="${checksum.matches}" arg2="false"/></condition>
      <fail if="checksum.matches.fail">Checksum error reading @{src} => @{dest}</fail>
      <var name="checksum.matches" unset="true"/>
      <var name="checksum.matches.fail" unset="true"/>
    </sequential>
  </macrodef>

  <macrodef name="get.size">
    <attribute name="file" />
    <attribute name="property" />
    <sequential>
      <var name="size" unset="true" />
      <var name="size-in-mb" unset="true" />
      <if>
        <available file="@{file}" />
        <then>
          <length file="@{file}" property="size" />

          <math result="size-in-mb">
            <op op="/">
              <op op="floor">
                <op op="*">
                  <op op="/">
                    <num value="${size}" />
                    <num value="1048576" />
                  </op>
                  <num value="100" />
                </op>
              </op>
              <num value="100" />
            </op>
          </math>

          <property name="@{property}" value="${size-in-mb}" />
        </then>
        <else>
          <property name="@{property}" value="-1" />
        </else>
      </if>
    </sequential>
  </macrodef>  

  <target name="create.jbds.results.html">

    <propertyregex property="qualifier" defaultvalue="${update.site.qualifier}" input="${update.site.qualifier}" regexp="GA.*" replace="GA" override="true" />
    <!-- <propertyregex property="qualifier" defaultvalue="${qualifier}" input="${qualifier}" regexp=".*null" replace="LOCAL" override="true" /> -->

    <property name="eap.version" value="${eap.version}"/>
    <property name="eclipse.version" value="${eclipse.version}"/>
    <property name="jbds.version" value="${update.site.version}.${qualifier}"/>
    <property name="jbds.update.site" value="${jbds.update.site}"/>

    <for list="jboss-devstudio-installer-standalone-file,jboss-devstudio-installer-eap-file,jboss-devstudio-src-file,jboss-devstudio-updatesite-core-file,jboss-devstudio-updatesite-central-file" param="this">
      <sequential>
        <if>
          <available file="${@{this}}" type="file"/>
          <then>
            <checksum file="${@{this}}" algorithm="SHA-256" fileext=".sha256"/>
            <loadfile srcfile="${@{this}}.sha256" property="@{this}.sha256" failonerror="true" />
            <get.size file="${@{this}}" property="@{this}-size" />
            <basename file="${@{this}}" property="@{this}-name" />
            <propertyregex property="templatename" defaultvalue="@{this}" input="@{this}" regexp="jboss-devstudio-(.+)-file" replace="\1" override="true" />
            <propertyregex property="templatename-alternate" defaultvalue="${templatename}" input="${templatename}" regexp="(.+)-(.+)" replace="\1" override="true" />

            <echo level="verbose">@{this} = ${@{this}}
  :: ${@{this}-name}, ${@{this}-size}M, ${@{this}.sha256}
  :: ${templatename}, ${templatename-alternate}</echo>

            <!-- generate manual-instructions.txt file for each artifact -->
            <var name="templatefile" unset="true"/>
            <condition property="templatefile" value="customer-portal/${templatename}.manual-instructions.txt" else="customer-portal/${templatename-alternate}.manual-instructions.txt">
              <available file="customer-portal/${templatename}.manual-instructions.txt" />
            </condition>
            <antcall target="generate.file.from.template">
              <param name="input" value="${templatefile}"/>
              <param name="output" value="${@{this}-name}.manual-instructions.txt"/>
            </antcall>

            <!-- generate detailed-description.html file for each artifact -->
            <var name="templatefile" unset="true"/>
            <condition property="templatefile" value="customer-portal/${templatename}.detailed-description.html" else="customer-portal/${templatename-alternate}.detailed-description.html">
              <available file="customer-portal/${templatename}.detailed-description.html" />
            </condition>
            <antcall target="generate.file.from.template">
              <param name="input" value="${templatefile}"/>
              <param name="output" value="${@{this}-name}.detailed-description.html"/>
            </antcall>
          </then>
        </if>
      </sequential>
    </for>
  </target>

  <!-- JBDS-3047 produce text/html fragments for each artifact -->
  <target name="generate.file.from.template">
    <!-- use locally built files with relative paths -->
    <echo level="verbose">Generate ${project.build.directory}/${output} from ${input}</echo>
    <copy todir="${project.build.directory}" overwrite="true">
      <fileset file="${input}" />
      <mapper type="merge" to="${output}" />
      <filterchain>
        <expandproperties />
      </filterchain>
    </copy>
  </target>

</project>
